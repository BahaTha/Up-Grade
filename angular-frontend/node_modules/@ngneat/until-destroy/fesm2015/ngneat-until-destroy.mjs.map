{"version":3,"file":"ngneat-until-destroy.mjs","sources":["../../../../libs/until-destroy/src/lib/ivy.ts","../../../../libs/until-destroy/src/lib/internals.ts","../../../../libs/until-destroy/src/lib/until-destroy.ts","../../../../libs/until-destroy/src/lib/until-destroyed.ts","../../../../libs/until-destroy/src/ngneat-until-destroy.ts"],"sourcesContent":["import { Type, ɵNG_PIPE_DEF, ɵPipeDef } from '@angular/core';\n\nconst NG_PIPE_DEF = ɵNG_PIPE_DEF as 'ɵpipe';\n\n// Angular doesn't expose publicly `PipeType` but it actually has it.\nexport interface PipeType<T> extends Type<T> {\n  ɵpipe: ɵPipeDef<T>;\n}\n\nexport function isPipe<T>(target: any): target is PipeType<T> {\n  return !!target[NG_PIPE_DEF];\n}\n","import { InjectableType, ɵDirectiveType, ɵComponentType } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { PipeType } from './ivy';\n\n/**\n * Applied to instances and stores `Subject` instance when\n * no custom destroy method is provided.\n */\nconst DESTROY: unique symbol = Symbol('__destroy');\n\n/**\n * Applied to definitions and informs that class is decorated\n */\nexport const DECORATOR_APPLIED: unique symbol = Symbol('__decoratorApplied');\n\n/**\n * If we use the `untilDestroyed` operator multiple times inside the single\n * instance providing different `destroyMethodName`, then all streams will\n * subscribe to the single subject. If any method is invoked, the subject will\n * emit and all streams will be unsubscribed. We wan't to prevent this behavior,\n * thus we store subjects under different symbols.\n */\nexport function getSymbol<T>(destroyMethodName?: keyof T): symbol {\n  if (typeof destroyMethodName === 'string') {\n    return Symbol(`__destroy__${destroyMethodName}`);\n  } else {\n    return DESTROY;\n  }\n}\n\nexport function markAsDecorated<T>(\n  type: InjectableType<T> | PipeType<T> | ɵDirectiveType<T> | ɵComponentType<T>\n): void {\n  // Store this property on the prototype if it's an injectable class, component or directive.\n  // We will be able to handle class extension this way.\n  type.prototype[DECORATOR_APPLIED] = true;\n}\n\nexport interface UntilDestroyOptions {\n  blackList?: string[];\n  arrayName?: string;\n  checkProperties?: boolean;\n}\n\nexport function createSubjectOnTheInstance(instance: any, symbol: symbol): void {\n  if (!instance[symbol]) {\n    instance[symbol] = new Subject<void>();\n  }\n}\n\nexport function completeSubjectOnTheInstance(instance: any, symbol: symbol): void {\n  if (instance[symbol]) {\n    instance[symbol].next();\n    instance[symbol].complete();\n    // We also have to re-assign this property thus in the future\n    // we will be able to create new subject on the same instance.\n    instance[symbol] = null;\n  }\n}\n","import {\n  InjectableType,\n  ɵComponentType as ComponentType,\n  ɵDirectiveType as DirectiveType,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { PipeType, isPipe } from './ivy';\nimport {\n  getSymbol,\n  UntilDestroyOptions,\n  completeSubjectOnTheInstance,\n  markAsDecorated,\n} from './internals';\n\nfunction unsubscribe(property: unknown): void {\n  if (property instanceof Subscription) {\n    property.unsubscribe();\n  }\n}\n\nfunction unsubscribeIfPropertyIsArrayLike(property: unknown[]): void {\n  Array.isArray(property) && property.forEach(unsubscribe);\n}\n\nfunction decorateNgOnDestroy(\n  ngOnDestroy: (() => void) | null | undefined,\n  options: UntilDestroyOptions\n) {\n  return function (this: any) {\n    // Invoke the original `ngOnDestroy` if it exists\n    ngOnDestroy && ngOnDestroy.call(this);\n\n    // It's important to use `this` instead of caching instance\n    // that may lead to memory leaks\n    completeSubjectOnTheInstance(this, getSymbol());\n\n    // Check if subscriptions are pushed to some array\n    if (options.arrayName) {\n      unsubscribeIfPropertyIsArrayLike(this[options.arrayName]);\n    }\n\n    // Loop through the properties and find subscriptions\n    if (options.checkProperties) {\n      for (const property in this) {\n        if (options.blackList?.includes(property)) {\n          continue;\n        }\n\n        unsubscribe(this[property]);\n      }\n    }\n  };\n}\n\nfunction decorateProviderDirectiveOrComponent<T>(\n  type: InjectableType<T> | DirectiveType<T> | ComponentType<T>,\n  options: UntilDestroyOptions\n): void {\n  type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);\n}\n\nfunction decoratePipe<T>(type: PipeType<T>, options: UntilDestroyOptions): void {\n  const def = type.ɵpipe;\n  def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);\n}\n\nexport function UntilDestroy(options: UntilDestroyOptions = {}): ClassDecorator {\n  return (type: any) => {\n    if (isPipe(type)) {\n      decoratePipe(type, options);\n    } else {\n      decorateProviderDirectiveOrComponent(type, options);\n    }\n\n    markAsDecorated(type);\n  };\n}\n","import { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  DECORATOR_APPLIED,\n  getSymbol,\n  createSubjectOnTheInstance,\n  completeSubjectOnTheInstance,\n} from './internals';\n\n// This will be provided through Terser global definitions by Angular CLI. This will\n// help to tree-shake away the code unneeded for production bundles.\ndeclare const ngDevMode: boolean;\n\nfunction overrideNonDirectiveInstanceMethod(\n  instance: any,\n  destroyMethodName: string,\n  symbol: symbol\n): void {\n  const originalDestroy = instance[destroyMethodName];\n\n  if (ngDevMode && typeof originalDestroy !== 'function') {\n    throw new Error(\n      `${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`\n    );\n  }\n\n  createSubjectOnTheInstance(instance, symbol);\n\n  instance[destroyMethodName] = function () {\n    // eslint-disable-next-line prefer-rest-params\n    originalDestroy.apply(this, arguments);\n    completeSubjectOnTheInstance(this, symbol);\n    // We have to re-assign this property back to the original value.\n    // If the `untilDestroyed` operator is called for the same instance\n    // multiple times, then we will be able to get the original\n    // method again and not the patched one.\n    instance[destroyMethodName] = originalDestroy;\n  };\n}\n\nexport function untilDestroyed<T>(instance: T, destroyMethodName?: keyof T) {\n  return <U>(source: Observable<U>) => {\n    const symbol = getSymbol<T>(destroyMethodName);\n\n    // If `destroyMethodName` is passed then the developer applies\n    // this operator to something non-related to Angular DI system\n    if (typeof destroyMethodName === 'string') {\n      overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);\n    } else {\n      ngDevMode && ensureClassIsDecorated(instance);\n      createSubjectOnTheInstance(instance, symbol);\n    }\n\n    return source.pipe(takeUntil<U>((instance as any)[symbol]));\n  };\n}\n\nfunction ensureClassIsDecorated(instance: InstanceType<any>): never | void {\n  const prototype = Object.getPrototypeOf(instance);\n  const missingDecorator = !(DECORATOR_APPLIED in prototype);\n\n  if (missingDecorator) {\n    throw new Error(\n      'untilDestroyed operator cannot be used inside directives or ' +\n        'components or providers that are not decorated with UntilDestroy decorator'\n    );\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}